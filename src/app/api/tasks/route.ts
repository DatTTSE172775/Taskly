import Task from "@/models/Task";
import dbConnect from "@/utils/dbConnect";
import { NextRequest, NextResponse } from "next/server";

// API GET: L·∫•y danh s√°ch Tasks
export async function GET(req: NextRequest) {
  try {
    await dbConnect();

    const userCookie = req.cookies.get("userPayload")?.value;

    if (!userCookie) {
      throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng trong headers.");
    }

    const user = JSON.parse(userCookie);
    const userId = user.id;

    // get query params from request
    const url = new URL(req.url);
    const status = url.searchParams.get("status");
    const priority = url.searchParams.get("priority");
    const sortBy = url.searchParams.get("sortBy") ?? "createdAt";
    const order = url.searchParams.get("order") ?? "desc";
    const page = parseInt(url.searchParams.get("page") ?? "1", 10);
    const limit = parseInt(url.searchParams.get("limit") ?? "10", 10);

    // create filter object
    const filter: { userId: string; status?: string; priority?: string } = {
      userId,
    };
    if (status) filter.status = status;
    if (priority) filter.priority = priority;

    // calcuslate skip page
    const skip = (page - 1) * limit;

    // get tasks from database
    const tasks = await Task.find(filter)
      .sort({ [sortBy]: order === "desc" ? -1 : 1 })
      .skip(skip)
      .limit(limit)
      .select("-__v -proress -assinees");

    // calculate total tasks
    const totalTasks = await Task.countDocuments(filter);

    return NextResponse.json({
      success: true,
      data: tasks,
      pagination: {
        total: totalTasks,
        page,
        limit,
        totalPages: Math.ceil(totalTasks / limit),
      },
    });
  } catch (error) {
    const errorMessage =
      error instanceof Error
        ? `L·ªói khi l·∫•y danh s√°ch c√¥ng vi·ªác: ${error.message}`
        : "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.";
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 400 }
    );
  }
}

// API POST: T·∫°o Task m·ªõi
export async function POST(req: NextRequest) {
  try {
    await dbConnect();

    // L·∫•y th√¥ng tin user t·ª´ cookies
    const userCookie = req.cookies.get("userPayload")?.value;

    if (!userCookie) {
      throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng trong cookies.");
    }

    const user = JSON.parse(userCookie);
    const userId = user.id;

    if (!userId) {
      throw new Error("User ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i trong cookies.");
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ body request
    const {
      title,
      description,
      status,
      priority,
      dueDate,
      progress,
      subTasks,
      assignees,
      tags,
      comments,
      attachments,
      customeFields,
      visibility,
    } = await req.json();

    // Ki·ªÉm tra xem c√°c tr∆∞·ªùng c√≥ h·ª£p l·ªá kh√¥ng
    if (!title || typeof title !== "string") {
      throw new Error("Ti√™u ƒë·ªÅ (title) l√† b·∫Øt bu·ªôc v√† ph·∫£i h·ª£p l·ªá.");
    }
    const validStatuses = ["Pending", "In Progress", "Completed"];
    if (status && !validStatuses.includes(status)) {
      throw new Error("Tr·∫°ng th√°i (status) kh√¥ng h·ª£p l·ªá.");
    }

    const validPriorities = ["Low", "Medium", "High", "Critical"];
    if (priority && !validPriorities.includes(priority)) {
      throw new Error("ƒê·ªô ∆∞u ti√™n (priority) kh√¥ng h·ª£p l·ªá.");
    }

    if (progress && (progress < 0 || progress > 100)) {
      throw new Error("Ti·∫øn ƒë·ªô (progress) ph·∫£i n·∫±m trong kho·∫£ng 0 - 100.");
    }

    const dueDateValue = dueDate ? new Date(dueDate) : null;
    console.log("üöÄ ~ POST ~ dueDateValue:", dueDateValue);
    if (dueDateValue && isNaN(dueDateValue.getTime())) {
      throw new Error("Ng√†y h·∫øt h·∫°n (dueDate) kh√¥ng h·ª£p l·ªá.");
    }

    // T·∫°o task m·ªõi trong database
    const newTask = await Task.create({
      title: title.trim(),
      description: description ? description.trim() : "",
      status: status ?? "Pending",
      priority: priority ?? "Medium",
      dueDate: dueDateValue,
      progress: progress ?? 0,
      subTasks: subTasks ?? [],
      assignees: assignees ?? [],
      tags: tags ?? [],
      comments: comments ?? [],
      attchments: attachments ?? [],
      customFields: customeFields ?? [],
      visibility: visibility ?? "Private",
      userId,
    });

    return NextResponse.json({ success: true, data: newTask }, { status: 201 });
  } catch (error) {
    const errorMessage =
      error instanceof Error
        ? `L·ªói khi t·∫°o c√¥ng vi·ªác m·ªõi: ${error.message}`
        : "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.";
    return NextResponse.json(
      { success: false, error: errorMessage },
      { status: 400 }
    );
  }
}
